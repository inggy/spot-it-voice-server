{"version":3,"sources":["components/JoinGameForm.tsx","scenes/SceneManager.ts","scenes/Scene.ts","pixi/Button.ts","models/GameActions.tsx","schemas/SubscriptionManager.ts","schemas/selectors/LobbySelectors.ts","pixi/StyleConstants.ts","scenes/LobbyScene.ts","schemas/selectors/GameSelectors.ts","pixi/PlayerList.ts","pixi/SpriteUtil.ts","pixi/CardContainer.ts","pixi/DeckContainer.ts","pixi/HandContainer.ts","scenes/GameScene.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["JoinGameForm","props","useState","roomName","setRoomName","nickName","setNickName","onSubmit","e","preventDefault","handleSubmit","htmlFor","name","value","onChange","target","type","disabled","SceneManager","app","scenes","current","this","scene","currentScene","stage","removeChild","hasOwnProperty","nextScene","hasRun","init","addChild","Scene","room","PIXI","Button","text","style","textStyle","clickCallback","textSprite","graphics","buttonWidth","width","padding","buttonHeight","height","lineStyle","borderWidth","borderColor","beginFill","fillColor","drawRoundedRect","Math","floor","radius","endFill","x","y","interactive","buttonMode","on","enabled","alpha","sitDown","send","standUp","startGame","backToLobby","SchemaListeners","callbacks","callback","push","changes","forEach","schemaListenerMappings","WeakMap","SubscriptionManager","schema","set","get","invokeCallbacks","_onChangeHandler","curSchemaListeners","addListener","getHost","host","isHost","playerId","isPlayer","players","getPlayerName","TextStyles","fontFamily","fontSize","default","ButtonStyles","primary","LobbyScene","playerListContainer","spectatorListContainer","sitDownButton","HEADING_2","standUpButton","startGameButton","HEADING_1","GameActions","state","change","field","renderPlayerList","updateButtonStates","renderSpectatorList","playerHeader","renderer","spectatorsHeader","onClick","removeChildren","Object","values","user","index","id","spectators","isUserPlayer","sessionId","setEnabled","visible","getGamePhase","gameState","phase","getCenterCardIndex","centerCardIndex","getCenterCard","deck","isWinner","winner","getPlayerHandIndex","playerHandIndex","getPlayerCardsRemaining","curIndex","playerHand","getPlayerHand","length","hands","cards","getPlayerCardAtIndex","handIndex","cardIndex","PlayerList","userId","playerTextMapping","playerScoreMapping","spotItSchema","numPrinted","keys","nameSprite","numCards","cardsLeft","hand","getCardsRemaining","cardRemainingSprite","onStateChange","SpriteUtil","spriteKey","window","__PUBLIC_URL__","getSpriteSheet","shared","resources","spritesheet","CardContainer","size","card","_clickCallback","disableOverlay","errorOverlay","drawCircle","sheet","angleBetweenSprites","PI","symbols","angleOffset","rotationOffset","distFromCenter","cardSprites","map","symbolNumber","fileName","padStart","sprite","textures","spriteSize","offset","cos","sin","scale","anchor","rotation","event","blurFilter","BlurFilter","filters","DeckContainer","curCard","playedByLabel","title","drawNewCard","playerPlayed","find","includes","getCenterCardPlayedBy","playedBy","destroy","children","HandContainer","playCardFunc","wrongPlayTimeout","playCardCallback","cardsRemainingLabel","_onLocalTimeoutChange","newFreeAfterTime","now","Date","clearTimeout","hideError","showError","setTimeout","subscribeClick","cardSymbol","numRemaining","clear","updateCardsRemaining","_unsubscribeFromPlayerDataChange","disable","_subscribeToPlayerDataChange","console","log","handPlayerId","localTimeouts","GameScene","toLobbyButton","getReadyLabel","handContainer","deckContainer","effectivePlayerId","gameInitialized","playerList","symbol","localTime","reset","handleGamePhaseChange","isAPlayer","prepareForGame","newGamePhase","initializeDecks","showHandLabel","endGameAsWinner","winningPlayer","endGame","location","document","replace","endpoint","indexOf","protocol","port","client","Colyseus","App","gameContainer","useRef","pixiReady","setPixiReady","pixiApp","setPixiApp","inRoom","setInRoom","useEffect","add","load","backgroundColor","prepend","view","className","joinOrCreate","then","sceneManager","addScene","header","getCurrentScene","switch","ref","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b8a966c.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\ninterface Props {\n    handleSubmit(roomName: string, name: string): void;\n}\n\nexport const JoinGameForm: React.FC<Props> = (props) => {\n    const [roomName, setRoomName] = useState<string>(\"\");\n    const [nickName, setNickName] = useState<string>(\"\");\n\n    return (\n        <form onSubmit={(e) => {\n                e.preventDefault();\n                props.handleSubmit(roomName, nickName);\n                return false;\n            }}>\n            <label htmlFor=\"roomName\">Room name</label>\n            <input name=\"roomName\" value={roomName} onChange={e => setRoomName(e.target.value)} />\n            <label htmlFor=\"nickName\">Your name</label>\n            <input name=\"nickName\" value={nickName} onChange={e => setNickName(e.target.value)} />\n            \n            <button type=\"submit\" disabled={roomName === \"\" || nickName === \"\"}>Join</button>\n        </form>\n    );\n}","import { IScene } from \"./Scene\";\n\nexport class SceneManager {\n    private app: PIXI.Application;\n    private scenes: Record<string, IScene>;\n    private current: string = \"\";\n\n    constructor(app: PIXI.Application) {\n        this.app = app;\n        this.scenes = {};\n    }\n\n    public getCurrentScene(): string {\n        return this.current;\n    }\n\n    public addScene(name: string, scene: IScene): void {\n        this.scenes[name] = scene;\n    }\n\n    public switch(name: string) {\n        const currentScene = this.scenes[this.current];\n        if (currentScene) {\n            this.app.stage.removeChild(currentScene);\n        }\n\n        if (this.scenes.hasOwnProperty(name)) {\n            this.current = name;\n            const nextScene = this.scenes[name];\n            if (nextScene) {\n                if (!nextScene.hasRun) {\n                    nextScene.init();\n                    nextScene.hasRun = true;\n                }\n                this.app.stage.addChild(nextScene);\n            }\n        }\n    }\n}","import * as PIXI from \"pixi.js\";\nimport * as Colyseus from \"colyseus.js\";\nimport { SpotItSchema } from \"../schemas/SpotItSchema\";\n\nexport interface IScene extends PIXI.Container {\n    app: PIXI.Application;\n    hasRun: boolean;\n    init(): void;\n}\n\nexport class Scene extends PIXI.Container implements IScene {\n    public app: PIXI.Application;\n    public hasRun: boolean = false;\n    public room: Colyseus.Room<SpotItSchema>;\n\n    constructor(app: PIXI.Application, room: Colyseus.Room<SpotItSchema>) {\n        super();\n        this.app = app;\n        this.room = room;\n    }\n\n    public init() : void {};\n\n}","import * as PIXI from \"pixi.js\";\n\nexport type ButtonStyle = {\n    padding: number,\n    borderWidth: number,\n    radius: number\n    borderColor: number,\n    fillColor: number;\n};\n\nexport type ClickCallback = () => any;\n\nexport class Button extends PIXI.Container {\n    clickCallback: ClickCallback | null = null;\n\n    constructor(text: string, style: ButtonStyle, textStyle: PIXI.TextStyle) {\n        super();\n        const textSprite = new PIXI.Text(text, textStyle);\n        \n        const graphics = new PIXI.Graphics();\n\n        const buttonWidth = textSprite.width + 2 * style.padding;\n        const buttonHeight = textSprite.height + 2 * style.padding;\n        graphics.lineStyle(style.borderWidth, style.borderColor, 1, 0);\n        graphics.beginFill(style.fillColor);\n        graphics.drawRoundedRect(Math.floor(-(buttonWidth/2)), 0, buttonWidth, buttonHeight, style.radius);\n        graphics.endFill();\n        \n        textSprite.x = Math.floor(-(textSprite.width/2));\n        textSprite.y = Math.floor(style.padding);\n        this.addChild(graphics);\n        this.addChild(textSprite);\n\n        this.interactive = true;\n        this.buttonMode = true;\n        this.on(\"pointerdown\", () => {\n            if (this.clickCallback) {\n                this.clickCallback();\n            }\n        })\n        \n    }\n\n    onClick(clickCallback: ClickCallback) {\n        this.clickCallback = clickCallback;\n    }\n\n    setEnabled(enabled: boolean) {\n        if (enabled) {\n            this.interactive = true;\n            this.buttonMode = true;\n            this.alpha = 1;\n        } else {\n            this.interactive = false;\n            this.buttonMode = false;\n            this.alpha = 0.5;\n        }\n    }\n}","import * as Colyseus from \"colyseus.js\";\n\nimport { SpotItSchema } from \"../schemas/SpotItSchema\";\n\nexport function sitDown(room: Colyseus.Room<SpotItSchema> ) {\n    room.send(\"sitDown\");\n}\n\nexport function standUp(room: Colyseus.Room<SpotItSchema> ) {\n    room.send(\"standUp\");\n}\n\nexport function startGame(room: Colyseus.Room<SpotItSchema>) {\n    room.send(\"startGame\");\n}\n\nexport function selectSymbol(room: Colyseus.Room<SpotItSchema>, symbol: number, centerCardIndex: number) {\n    room.send(\"selectSymbol\", { symbol, centerCardIndex, localTime: Date.now() });\n}\n\nexport function backToLobby(room: Colyseus.Room<SpotItSchema>) {\n    room.send(\"returnLobby\");\n}","import { Schema, DataChange } from \"@colyseus/schema\";\n\ntype Listener = (changes: DataChange[]) => any;\n\nclass SchemaListeners {\n    private callbacks: Listener[] = [];\n\n    public addListener(callback: Listener) {\n        this.callbacks.push(callback);\n    }\n\n    public invokeCallbacks(changes: DataChange[]) {\n        this.callbacks.forEach(callback => callback(changes));\n    }\n}\n\nconst schemaListenerMappings = new WeakMap<Object, SchemaListeners>();\n\nfunction _onChangeHandler(schema: Schema, changes: DataChange[]) {\n    schemaListenerMappings.get(schema)?.invokeCallbacks(changes);\n}\n\nexport const SubscriptionManager = {\n    subscribe(schema: Schema, callback: Listener) {\n        \n        if (!schema.onChange) {\n            schemaListenerMappings.set(schema, new SchemaListeners());\n            schema.onChange = (changes) => _onChangeHandler(schema, changes);\n        }\n\n        let curSchemaListeners = schemaListenerMappings.get(schema);\n        if (curSchemaListeners) {\n            curSchemaListeners.addListener(callback);\n        }\n    }\n}","import { SpotItSchema } from \"../SpotItSchema\";\nimport { User } from \"../User\";\n\nexport function getHost(schema: SpotItSchema): string {\n    return schema.host;\n}\n\nexport function isHost(schema: SpotItSchema, playerId: string): boolean {\n    return getHost(schema) === playerId;\n}\n\nexport function getPlayerList(schema: SpotItSchema): User[] {\n    return Object.values(schema.players);\n}\n\nexport function getSpectatorList(schema: SpotItSchema): User[] {\n    return Object.values(schema.spectators);\n}\n\nexport function isPlayer(schema: SpotItSchema, playerId: string): boolean {\n    return !!schema.players[playerId];\n}\n\nexport function getPlayerName(schema: SpotItSchema, playerId: string) {\n    return schema.players[playerId].name;\n}","import * as PIXI from \"pixi.js\";\nimport { ButtonStyle } from \"./Button\";\n\nconst APP_FONT_FAMILY = \"Comic Sans MS\";\n\nexport const TextStyles: Record<string, PIXI.TextStyle> = {\n    \"HEADING_1\": new PIXI.TextStyle({\n        fontFamily: APP_FONT_FAMILY,\n        fontSize: 36,\n    }),\n    \"HEADING_2\": new PIXI.TextStyle({\n        fontFamily: APP_FONT_FAMILY,\n        fontSize: 24,\n    }),\n    default: new PIXI.TextStyle({\n        fontFamily: APP_FONT_FAMILY,\n        fontSize: 16,\n    })\n};\n\nconst PADDING = 10;\nconst RADIUS = 8;\n\nexport const ButtonStyles: Record<string, ButtonStyle> = {\n    default: {\n        padding: PADDING,\n        borderColor: 0x000000,\n        borderWidth: 3,\n        fillColor: 0xffffff,\n        radius: RADIUS,\n    },\n    primary: {\n        padding: PADDING,\n        borderColor: 0x000000,\n        borderWidth: 3,\n        fillColor: 0x35CC5A,\n        radius: RADIUS,\n    }\n}\n","import * as PIXI from \"pixi.js\";\nimport { DataChange } from \"@colyseus/schema\";\n\nimport { Scene } from \"./Scene\";\nimport { User } from \"../schemas/User\";\nimport { Button } from \"../pixi/Button\";\nimport * as GameActions from \"../models/GameActions\";\nimport { SubscriptionManager } from \"../schemas/SubscriptionManager\";\nimport { isHost, getPlayerList, getSpectatorList, isPlayer } from \"../schemas/selectors/LobbySelectors\";\nimport { TextStyles, ButtonStyles } from \"../pixi/StyleConstants\";\n\nexport class LobbyScene extends Scene {\n    private playerListContainer: PIXI.Container = new PIXI.Container();\n    private spectatorListContainer: PIXI.Container = new PIXI.Container();\n    private sitDownButton: Button = new Button(\"Play\", ButtonStyles.default, TextStyles.HEADING_2);\n    private standUpButton: Button = new Button(\"Spectate\", ButtonStyles.default, TextStyles.HEADING_2)\n    private startGameButton: Button = new Button(\"Start Game\", ButtonStyles.primary, TextStyles.HEADING_1);\n\n    init() {\n        SubscriptionManager.subscribe(this.room.state, (changes: DataChange[]) => {\n            changes.forEach(change => {\n                switch (change.field) {\n                    case \"host\":\n                    case \"players\":\n                        this.renderPlayerList();\n                        this.updateButtonStates();\n                        break;\n                    case \"spectators\":\n                        this.renderSpectatorList();\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n        \n        const playerHeader = new PIXI.Text(`Players`, TextStyles.HEADING_1);\n        playerHeader.x = (this.app.renderer.width * 1.0 / 3.0) - (playerHeader.width / 2);\n        playerHeader.y = 100;\n        this.addChild(playerHeader);\n\n        const spectatorsHeader = new PIXI.Text(`Spectators`, TextStyles.HEADING_1);\n        spectatorsHeader.x = (this.app.renderer.width * 2.0 / 3.0) - (spectatorsHeader.width / 2);\n        spectatorsHeader.y = 100;\n        this.addChild(spectatorsHeader);\n\n        this.playerListContainer.x = playerHeader.x + (playerHeader.width /2);\n        this.playerListContainer.y = playerHeader.y + playerHeader.height + 15;\n        this.addChild(this.playerListContainer);\n        \n        this.spectatorListContainer.x = spectatorsHeader.x + (spectatorsHeader.width/2);\n        this.spectatorListContainer.y = this.playerListContainer.y;\n        this.addChild(this.spectatorListContainer);\n        \n        this.renderPlayerList();\n        this.renderSpectatorList();\n\n        this.sitDownButton.x = Math.floor((this.app.renderer.width /2));\n        this.sitDownButton.y = 470;\n        this.sitDownButton.onClick(this.sitDown);\n\n        this.standUpButton.x = Math.floor((this.app.renderer.width /2));\n        this.standUpButton.y = 470;\n        this.standUpButton.onClick(this.standUp);\n\n        this.startGameButton.x = Math.floor((this.app.renderer.width /2));\n        this.startGameButton.y = 530;\n        this.startGameButton.onClick(this.startGame);\n\n        this.addChild(this.sitDownButton);\n        this.addChild(this.standUpButton);\n\n        this.updateButtonStates();\n    }\n\n    renderPlayerList() {\n        this.playerListContainer.removeChildren();\n\n        getPlayerList(this.room.state).forEach((user: User, index: number) => {\n            const textSprite = new PIXI.Text(user.name + (isHost(this.room.state, user.id) ? \" [Host]\" : \"\"), TextStyles.HEADING_2 );\n            textSprite.x = -(textSprite.width /2);\n            textSprite.y = index * 30;\n            this.playerListContainer.addChild(textSprite);\n        });\n    }\n\n    renderSpectatorList() {\n        this.spectatorListContainer.removeChildren();\n\n        getSpectatorList(this.room.state).forEach((user: User, index: number) => {\n            const textSprite = new PIXI.Text(user.name, TextStyles.HEADING_2);\n            textSprite.x = -(textSprite.width /2);\n            textSprite.y = index * 30;\n            this.spectatorListContainer.addChild(textSprite);\n        });\n    }\n\n    updateButtonStates() {\n        const isUserPlayer = isPlayer(this.room.state, this.room.sessionId);\n\n        this.sitDownButton.setEnabled(!isUserPlayer);\n        this.sitDownButton.visible = !isUserPlayer;\n        this.standUpButton.setEnabled(isUserPlayer);\n        this.standUpButton.visible = isUserPlayer;\n\n        if (isHost(this.room.state, this.room.sessionId)) {\n            this.addChild(this.startGameButton);\n        } else {\n            this.removeChild(this.startGameButton);\n        }\n    }\n\n    sitDown = () => {\n        GameActions.sitDown(this.room);\n    }\n\n    standUp = () =>  {\n        GameActions.standUp(this.room);\n    }\n\n    startGame = () => {\n        GameActions.startGame(this.room);\n    }\n}","import { SpotItSchema } from \"../SpotItSchema\";\nimport { Card } from \"../Card\";\nimport { Hand } from \"../Hand\";\nimport { getPlayerName } from \"./LobbySelectors\";\n\n\nexport function getGamePhase(schema: SpotItSchema): string {\n    return schema.gameState.phase;\n}\n\nexport function hasGameEnded(schema: SpotItSchema): boolean {\n    return getGamePhase(schema) === \"endgame\";\n}\n\nexport function getCenterCardIndex(schema: SpotItSchema): number {\n    return schema.gameState.centerCardIndex;\n}\n\nexport function getCenterCard(schema: SpotItSchema): Card {\n    return schema.deck[getCenterCardIndex(schema)];\n}\n\nexport function isWinner(schema: SpotItSchema, playerId: string): boolean {\n    return schema.gameState.winner === playerId;\n}\n\nexport function getWinnerName(schema: SpotItSchema): string {\n    return getPlayerName(schema, schema.gameState.winner);\n}\n\nexport function getPlayerHandIndex(schema: SpotItSchema, playerId: string): number {\n    return schema.gameState.playerHandIndex[playerId];\n}\n\nexport function getPlayerCardsRemaining(schema: SpotItSchema, playerId: string, curIndex: number): number | null {\n    const playerHand = getPlayerHand(schema, playerId);\n    if (playerHand) {\n        return playerHand.length - curIndex;\n    } else {\n        return null;\n    }\n}\n\nfunction getPlayerHand(schema: SpotItSchema, playerId: string): number[] {\n    return (schema.gameState.hands[playerId] as Hand)?.cards;\n}\n\nexport function getPlayerCard(schema: SpotItSchema, playerId: string): Card {\n    const cardIndex = getPlayerHand(schema, playerId)[getPlayerHandIndex(schema, playerId)];\n    return schema.deck[cardIndex]\n}\n\nexport function getPlayerCardAtIndex(schema: SpotItSchema, playerId: string, handIndex: number) {\n    const cardIndex = getPlayerHand(schema, playerId)[handIndex];\n    return schema.deck[cardIndex]\n}\n\nexport function getCardsRemaining(schema: SpotItSchema, playerId: string): number {\n    if (isWinner(schema, playerId)) {\n        return 0;\n    }\n    \n\n    const curIndex = getPlayerHandIndex(schema, playerId);\n    const hand = getPlayerHand(schema, playerId);\n\n    if (curIndex == null || !hand) {\n        return 0\n    }\n    \n    return hand.length - curIndex;\n}\n\nexport function getCenterCardPlayedBy(schema: SpotItSchema): string | null {\n\n    const centerCardIndex = getCenterCardIndex(schema);\n    \n    const playerPlayed = Object.keys(schema.gameState.hands).find(playerId => {\n        const playerHand = getPlayerHand(schema, playerId);\n        return playerHand.includes(centerCardIndex);\n    });\n    \n    if (playerPlayed) {\n        return getPlayerName(schema, playerPlayed);\n    } else {\n        return null;\n    }\n}\n","import * as PIXI from 'pixi.js'\nimport * as Colyseus from 'colyseus.js';\n\nimport { SpotItSchema } from \"../schemas/SpotItSchema\";\nimport { getCardsRemaining } from '../schemas/selectors/GameSelectors';\nimport { TextStyles } from './StyleConstants';\n\nexport class PlayerList extends PIXI.Container {\n    private playerTextMapping: Record<string, PIXI.Text> = {};\n    private playerScoreMapping: Record<string, PIXI.Text> = {};\n\n    constructor(userId: string, room: Colyseus.Room<SpotItSchema>) {\n        super();\n        \n        // TODO: make this more specific\n        room.onStateChange(this.renderPlayerList)\n\n        this.renderPlayerList(room.state);\n    }\n\n    renderPlayerList = (spotItSchema: SpotItSchema) => {\n        this.removeChildren();\n        this.playerTextMapping = {};\n        this.playerScoreMapping = {};\n\n        let numPrinted = 0;\n\n        Object.keys(spotItSchema.players).forEach((playerId) => {\n            const nameSprite = new PIXI.Text(spotItSchema.players[playerId].name, TextStyles.HEADING_2);\n            nameSprite.x = 0;\n            nameSprite.y = numPrinted * 65;\n            this.addChild(nameSprite);\n            this.playerTextMapping[playerId] = nameSprite;\n\n            const cardsLeft = getCardsRemaining(spotItSchema, playerId);\n            const cardRemainingSprite = new PIXI.Text(formatCardsRemaining(cardsLeft), TextStyles.HEADING_2);\n            cardRemainingSprite.x = 20;\n            cardRemainingSprite.y = nameSprite.y + 30;\n            this.addChild(cardRemainingSprite);\n            this.playerScoreMapping[playerId] = cardRemainingSprite;\n\n            numPrinted++;\n            \n        });\n    }\n\n}\n\nfunction formatCardsRemaining(numCards: number) {\n    return `${numCards} card${numCards > 1 ? \"s\":\"\"}`;\n}","import * as PIXI from \"pixi.js\";\n\nexport const SpriteUtil = {\n    spriteKey: (window as any).__PUBLIC_URL__ + \"/assets/spritesheet.json\",\n\n    getSpriteSheet: (): PIXI.Spritesheet => {\n        return PIXI.Loader.shared.resources[SpriteUtil.spriteKey].spritesheet as PIXI.Spritesheet;\n    }\n}","import { Card } from \"../schemas/Card\";\nimport * as PIXI from 'pixi.js';\nimport { SpriteUtil } from \"./SpriteUtil\";\n\ntype ClickCallback = (symbol: number) => void;\n\nexport class CardContainer extends PIXI.Container {\n    private _clickCallback: ClickCallback[] = [];\n    private disableOverlay: PIXI.Graphics = new PIXI.Graphics();\n    private errorOverlay: PIXI.Graphics = new PIXI.Graphics();\n\n    constructor(size: number, card: Card, interactive: boolean = false) {\n        super();\n\n        const graphics = new PIXI.Graphics();\n\n        graphics.lineStyle(2, 0x999999, 1);\n        graphics.beginFill(0xFFFFFF, 1);\n        graphics.drawCircle(0, 0, size / 2);\n        graphics.endFill();\n\n        this.addChild(graphics);\n        \n        this.disableOverlay.beginFill(0xffffff, 0.5);\n        this.disableOverlay.drawCircle(0, 0, size / 2);\n        this.disableOverlay.endFill();\n\n        \n        this.errorOverlay.lineStyle(4, 0xe30000, 1);\n        this.errorOverlay.drawCircle(0, 0, size / 2);\n        \n        let sheet = SpriteUtil.getSpriteSheet();\n        \n        const angleBetweenSprites = (Math.PI * 2) / (card.symbols.length - 1);\n        const angleOffset = card.rotationOffset * (Math.PI * 2);\n\n        const distFromCenter = size/3.75;\n\n        const cardSprites = card.symbols.map((symbolNumber, index) => {\n            const fileName = (symbolNumber + \"\").padStart(2, \"0\") + \".png\";\n            const sprite = new PIXI.Sprite(sheet.textures[fileName]);\n            \n            const spriteSize = size / 4;\n            const x = (index === 0) ? 0 : (distFromCenter + (size / 9.0  * card.offset[index])) * Math.cos(angleOffset + (index * angleBetweenSprites));\n            const y = (index === 0) ? 0 : (distFromCenter + (size / 9.0  * card.offset[index])) * Math.sin(angleOffset + (index * angleBetweenSprites));\n           \n            sprite.x = x;\n            sprite.y = y;\n            \n            sprite.width = spriteSize * (card.scale[index]);\n            sprite.height = spriteSize * (card.scale[index]);\n            sprite.anchor.set(0.5);\n            sprite.rotation = card.rotation[index] * (Math.PI * 2);\n            \n            if (interactive) {\n                sprite.interactive = true;\n                sprite.buttonMode = true;\n                sprite.on('pointerdown', (event: PIXI.InteractionEvent) => {\n                    this._clickCallback.forEach(callback => callback(symbolNumber));\n                });\n            }\n \n            return sprite;\n        });\n        \n        this.addChild(...cardSprites);\n\n        //const cardId = new PIXI.Text(card.id + \"\");\n        //this.addChild(cardId);\n    }\n\n    disable() {\n        this.removeChild(this.errorOverlay);\n        const blurFilter = new PIXI.filters.BlurFilter(5);\n        this.filters = [blurFilter];\n        this.addChild(this.disableOverlay);\n    }\n\n    showError() {\n        this.addChild(this.errorOverlay);\n    }\n\n    hideError() {\n        this.removeChild(this.errorOverlay);\n    }\n\n    clear() {\n        this.filters = [];\n        this.removeChildren();\n    }\n\n    subscribeClick(callback: ClickCallback) {\n        this._clickCallback.push(callback);\n    }\n}","import * as PIXI from \"pixi.js\";\nimport { Card } from \"../schemas/Card\";\nimport { SpotItSchema } from \"../schemas/SpotItSchema\";\nimport { CardContainer } from \"./CardContainer\";\nimport { SubscriptionManager } from \"../schemas/SubscriptionManager\";\nimport { getCenterCard, getCenterCardPlayedBy } from \"../schemas/selectors/GameSelectors\";\nimport { TextStyles } from \"./StyleConstants\";\n\nexport class DeckContainer extends PIXI.Container {\n    private curCard: CardContainer | null = null;\n    private size: number = 0;\n    private schema: SpotItSchema;\n    private playedByLabel: PIXI.Text;\n\n    constructor(spotItSchema: SpotItSchema, size: number) {\n        super();\n\n        this.schema = spotItSchema;\n        this.size = size;\n        \n        const title = new PIXI.Text(\"Center Card\", TextStyles.HEADING_1);\n        title.x = -Math.floor(title.width / 2);\n        title.y = -(Math.floor(this.size / 2) + 85);\n\n        this.playedByLabel = new PIXI.Text(\"\", TextStyles.HEADING_2);\n        this.playedByLabel.y = -(Math.floor(this.size / 2) + 40);\n\n        SubscriptionManager.subscribe(spotItSchema.gameState, (changes) => {\n            changes.forEach(change => {\n                if (change.field === \"centerCardIndex\") {\n                    this.drawNewCard(getCenterCard(spotItSchema), getCenterCardPlayedBy(spotItSchema));\n                }\n            })\n        });\n\n        this.drawNewCard(getCenterCard(spotItSchema), null);\n        this.addChild(title);\n        this.addChild(this.playedByLabel);\n    }\n\n    drawNewCard(card: Card, playedBy: string | null) {\n        if (this.curCard) {\n            this.removeChild(this.curCard);\n            this.curCard.destroy({children: true});\n        }\n\n        if (playedBy) {\n            this.playedByLabel.text = `played by ${playedBy}`;\n            this.playedByLabel.x = -Math.floor((this.playedByLabel.width / 2));\n        } else {\n            this.playedByLabel.text = \"\";\n        }\n        this.curCard = new CardContainer(this.size, card);\n        this.addChild(this.curCard);\n    }\n\n    reset() {\n        if (this.curCard) {\n            this.removeChild(this.curCard);\n        }\n        this.curCard = null;\n    }\n\n    prepareForGame() {\n        this.drawNewCard(getCenterCard(this.schema), null);\n    }\n}","import * as PIXI from \"pixi.js\";\nimport { Card } from \"../schemas/Card\";\nimport { SpotItSchema } from \"../schemas/SpotItSchema\";\nimport { CardContainer } from \"./CardContainer\";\nimport { getPlayerCardAtIndex, getPlayerCardsRemaining } from \"../schemas/selectors/GameSelectors\";\nimport { TextStyles } from \"./StyleConstants\";\n\nexport type PlayCardFunction = (symbol: number) => void;\n\nexport class HandContainer extends PIXI.Container {\n    private curCard: CardContainer | null = null;\n    private size: number = 0;\n    private playerId: string = \"\";\n    private isPlayer: boolean = true;\n\n    private wrongPlayTimeout: null | NodeJS.Timeout = null;\n\n    private playCardCallback: PlayCardFunction;\n\n    private schema: SpotItSchema;\n    private cardsRemainingLabel: PIXI.Text;\n\n    constructor(spotItSchema: SpotItSchema, size: number, playCardFunc: PlayCardFunction) {\n        super();\n\n        this.playCardCallback = playCardFunc;\n\n        this.schema = spotItSchema;\n\n        this.size = size;\n\n        const title = new PIXI.Text(\"Your Hand\", TextStyles.HEADING_1);\n        title.x = -Math.floor(title.width / 2);\n        title.y = -(Math.floor(this.size / 2) + 85);\n\n        this.cardsRemainingLabel = new PIXI.Text(\"\", TextStyles.HEADING_2);\n        this.cardsRemainingLabel.y = -(Math.floor(this.size / 2) + 40);\n\n        this.addChild(title);\n        this.addChild(this.cardsRemainingLabel);\n\n    }\n\n    drawNewCard(card: Card) {\n        if (this.curCard) {\n            this.removeChild(this.curCard);\n            this.curCard.destroy({children: true});\n        }\n\n        this.curCard = new CardContainer(this.size, card, this.isPlayer);\n        this.curCard.subscribeClick((cardSymbol: number) => {\n            this.playCardCallback(cardSymbol);\n        });\n        this.addChild(this.curCard);\n    }\n\n    updateCardsRemaining(numRemaining: number | null) {\n        if (numRemaining == null) {\n            this.cardsRemainingLabel.text = \"\";\n        } else {\n            this.cardsRemainingLabel.text = numRemaining + \" card\" + ((numRemaining === 1)? \"\": \"s\") + \" remaining\";\n            this.cardsRemainingLabel.x = -Math.floor(this.cardsRemainingLabel.width / 2);\n        }\n    }\n\n    // Game has ended and player is the winner\n    endGameAsWinner() {\n        this.curCard?.clear();\n        this.updateCardsRemaining(0);\n        this._unsubscribeFromPlayerDataChange();\n    }\n\n    // Game had ended, but player is not the winner\n    endGame() {\n        this.curCard?.disable()\n        this._unsubscribeFromPlayerDataChange();\n    }\n\n    prepareForGame(playerId: string, isPlayer: boolean) {\n        this.playerId = playerId;\n        this.isPlayer = isPlayer;\n\n        this._subscribeToPlayerDataChange();\n    }\n\n    reset() {\n        this.updateCardsRemaining(null);\n        if (this.curCard) {\n            this.removeChild(this.curCard);\n        }\n        this.curCard = null;\n    }\n\n    startGame() {\n        this.drawNewCard(getPlayerCardAtIndex(this.schema, this.playerId, 0));\n        this.updateCardsRemaining(getPlayerCardsRemaining(this.schema, this.playerId, 0));\n    }\n\n    _subscribeToPlayerDataChange() {\n        console.log(\"subscribe\");\n        this.schema.gameState.playerHandIndex.onChange = (curIndex, handPlayerId) => {\n            if (handPlayerId === this.playerId) {\n                this.drawNewCard(getPlayerCardAtIndex(this.schema, this.playerId, curIndex));\n                this.updateCardsRemaining(getPlayerCardsRemaining(this.schema, this.playerId, curIndex));\n            }\n        }\n\n        \n        this.schema.gameState.localTimeouts.onChange = this._onLocalTimeoutChange;\n    }\n\n    _onLocalTimeoutChange = (newFreeAfterTime: number, playerId: string) => {\n        if (playerId !== this.playerId) return;\n\n        const now = Date.now();\n\n        if (this.wrongPlayTimeout) {\n            clearTimeout(this.wrongPlayTimeout);\n            this.wrongPlayTimeout = null;\n            this.curCard?.hideError();\n        }\n\n        if (now < newFreeAfterTime) {\n            this.curCard?.showError();\n            this.wrongPlayTimeout = setTimeout(() => {\n                this.curCard?.hideError();\n                this.wrongPlayTimeout = null;\n            }, newFreeAfterTime - now);\n        }\n    }\n\n    _unsubscribeFromPlayerDataChange() {\n        console.log(\"unsubscribe\");\n        this.schema.gameState.playerHandIndex.onChange = () => {};\n        this.schema.gameState.localTimeouts.onChange = () => {};\n    }\n}","import * as PIXI from \"pixi.js\";\nimport { Scene } from \"./Scene\";\nimport * as GameActions from \"../models/GameActions\";\nimport { PlayerList } from \"../pixi/PlayerList\";\nimport { DeckContainer } from \"../pixi/DeckContainer\";\nimport { HandContainer } from \"../pixi/HandContainer\";\n\nimport { Button } from \"../pixi/Button\";\nimport { isHost, isPlayer, getHost } from \"../schemas/selectors/LobbySelectors\";\nimport { SubscriptionManager } from \"../schemas/SubscriptionManager\";\nimport { isWinner, getGamePhase, getWinnerName, getCenterCardIndex } from \"../schemas/selectors/GameSelectors\";\nimport { ButtonStyles, TextStyles } from \"../pixi/StyleConstants\";\n\nexport class GameScene extends Scene {\n    private toLobbyButton: Button = new Button(\"Back to lobby\", ButtonStyles.default, TextStyles.HEADING_2);\n    private getReadyLabel: PIXI.Text = new PIXI.Text(\"Get Ready!\", TextStyles.HEADING_1);\n    //@ts-ignore\n    private handContainer: HandContainer;\n    //@ts-ignore\n    private deckContainer: DeckContainer;\n\n    private effectivePlayerId: string = \"\";\n    \n    private gameInitialized: boolean = false;\n\n    init() {\n        const playerList = new PlayerList(this.room.sessionId, this.room);\n        playerList.x = 10;\n        playerList.y = 96;\n\n        this.addChild(playerList);\n\n        let cardSize = 370;\n        \n\n        const deckContainer = new DeckContainer(this.room.state, cardSize);\n        deckContainer.x = 415;\n        deckContainer.y = 370;\n        \n        const handContainer = new HandContainer(\n            this.room.state,\n            cardSize,\n            (symbol) => GameActions.selectSymbol(this.room, symbol, getCenterCardIndex(this.room.state))\n        );\n        \n        handContainer.x = 850;\n        handContainer.y = 370;\n\n        this.addChild(deckContainer);\n        this.addChild(handContainer);\n\n        this.toLobbyButton.x = 630;\n        this.toLobbyButton.y = 570;\n        this.toLobbyButton.onClick(this.backToLobby);\n\n        this.getReadyLabel.x = Math.floor(handContainer.x - (this.getReadyLabel.width/2));\n        this.getReadyLabel.y = Math.floor(handContainer.y - (this.getReadyLabel.height/2));\n\n        SubscriptionManager.subscribe(this.room.state, (changes) => {\n            changes.forEach(change => {\n                if (change.field === \"mode\") {\n                    if (change.value === \"lobby\") {\n                        this.removeChild(this.toLobbyButton);\n\n                        deckContainer.reset();\n                        handContainer.reset();\n                    }\n                }\n            });\n        })\n\n        SubscriptionManager.subscribe(this.room.state.gameState, (changes) => {\n            changes.forEach(change => {\n                if (change.field === \"phase\") {\n                    this.handleGamePhaseChange(change.value);\n                }\n            });\n        });\n\n        this.handContainer = handContainer;\n        this.deckContainer = deckContainer;\n\n        this.handleGamePhaseChange(getGamePhase(this.room.state));\n    }\n\n    backToLobby = () => {\n        GameActions.backToLobby(this.room);\n    }\n\n    initializeDecks() {\n        const isAPlayer = isPlayer(this.room.state, this.room.sessionId);\n        this.effectivePlayerId = isAPlayer ? this.room.sessionId : getHost(this.room.state);\n        this.deckContainer.prepareForGame();\n        this.handContainer.prepareForGame(this.effectivePlayerId, isAPlayer);\n        this.gameInitialized = true;\n    }\n\n    showHandLabel(text: string | null) {\n        if (text) {\n            this.getReadyLabel.text = text;\n            this.getReadyLabel.x = Math.floor(this.handContainer.x - (this.getReadyLabel.width / 2));\n        }\n        this.addChild(this.getReadyLabel);\n    }\n\n    handleGamePhaseChange(newGamePhase: string) {\n        switch(newGamePhase) {\n            case \"pregame\":\n                this.initializeDecks();\n                this.showHandLabel(\"Get Ready!\");\n                break;\n            case \"in_progress\":\n                if (!this.gameInitialized) {\n                    this.initializeDecks();\n                }\n                this.handContainer.startGame();\n                this.removeChild(this.getReadyLabel);\n                break;\n\n            case \"endgame\":\n                if (isWinner(this.room.state, this.effectivePlayerId)) {\n                    this.showHandLabel(\"You Win!\");\n                    this.handContainer.endGameAsWinner();\n                } else {\n                    const winningPlayer = getWinnerName(this.room.state);\n                    this.showHandLabel( `${winningPlayer} wins`);\n\n                    this.handContainer.endGame();\n                }\n\n                if (isHost(this.room.state, this.room.sessionId)) {\n                    this.addChild(this.toLobbyButton);\n                }\n                break;\n            default:\n                this.removeChild(this.getReadyLabel);\n                this.gameInitialized = false;\n                break;\n        }\n    }\n}","import React, { useRef, useEffect, useState } from 'react';\nimport * as PIXI from \"pixi.js\";\nimport * as Colyseus from \"colyseus.js\";\nimport { DataChange } from \"@colyseus/schema\";\n\nimport './App.css';\nimport { JoinGameForm } from './components/JoinGameForm';\nimport { SpotItSchema } from './schemas/SpotItSchema';\nimport { SceneManager } from './scenes/SceneManager';\nimport { LobbyScene } from './scenes/LobbyScene';\nimport { GameScene } from './scenes/GameScene';\nimport { SubscriptionManager } from './schemas/SubscriptionManager';\nimport { TextStyles } from './pixi/StyleConstants';\n\nconst location = window.document.location;\n\nvar host = location.host.replace(/:.*/, '');\nlet endpoint = \"ws://localhost:2567\";\nif (host.indexOf(\"localhost\") < 0) {\n  endpoint = location.protocol.replace(\"http\", \"ws\") + \"//\" + host + (location.port ? ':' + location.port : '');\n}\n\nconst client = new Colyseus.Client(endpoint);\n\nfunction App() {\n  const gameContainer = useRef(null);\n  const [pixiReady, setPixiReady] = useState<boolean>(false);\n  const [pixiApp, setPixiApp] = useState<PIXI.Application>();\n  const [inRoom, setInRoom] = useState<boolean>(false);\n\n  useEffect(() => {\n    PIXI.Loader.shared\n        .add((window as any).__PUBLIC_URL__ + \"/assets/spritesheet.json\")\n        .load(() => {\n          const app = new PIXI.Application({ backgroundColor: 0xffffff, width: 1100, height: 630 });\n          if (gameContainer.current != null) {\n            // @ts-ignore\n            gameContainer.current.prepend(app.view);\n            setPixiApp(app);\n            setPixiReady(true);\n          }\n        });\n  }, []);\n\n  function joinRoom(roomName: string, name: string) {\n    client.joinOrCreate<SpotItSchema>(\"spot-it\", { roomName, name }).then((room: Colyseus.Room<SpotItSchema>) => {\n      \n      const app: PIXI.Application = pixiApp as PIXI.Application;\n\n      const sceneManager = new SceneManager(app);\n\n      sceneManager.addScene(\"lobby\", new LobbyScene(app, room));\n      sceneManager.addScene(\"game\", new GameScene(app, room));\n\n      const header = new PIXI.Text(`Room: ${roomName}`, TextStyles.HEADING_2);\n      header.x = 10;\n      header.y = 10;\n      app.stage.addChild(header);\n\n      SubscriptionManager.subscribe(room.state, (changes: DataChange[]) => {\n        changes.forEach(change => {\n          switch(change.field) {\n            case \"mode\": \n              if (change.value !== sceneManager.getCurrentScene()) {\n                sceneManager.switch(change.value);\n              }\n              break;\n          }\n        });\n      });\n      setInRoom(true);\n    });\n  }\n  \n  return (\n    <div className=\"App\">\n      <div id=\"joinGameForm\">\n        {pixiReady && !inRoom && <JoinGameForm handleSubmit={joinRoom} /> }\n      </div>\n      <div ref={gameContainer}></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}